# Name for my workflow
name: Build for IIS Server
# Trigger workflow when code is pushed to the 'main' branch
on:
  push:
    branches:
      - main

jobs:
  # Build job
  build:
    runs-on: windows-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20 # Specify Node.js version

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      - name: Create .env file with secrets
        run: |
          echo "VITE_GMAP_KEY=${{ secrets.VITE_GMAP_KEY }}" >> .env
          echo "VITE_EMAILJS_PUBLIC_KEY=${{ secrets.VITE_EMAILJS_PUBLIC_KEY }}" >> .env
          echo "VITE_EMAILJS_SERVICE_ID=${{ secrets.VITE_EMAILJS_SERVICE_ID }}" >> .env
          echo "VITE_EMAILJS_TEMPLATE_ID=${{ secrets.VITE_EMAILJS_TEMPLATE_ID }}" >> .env
          echo "VITE_EMAILJS_TEMPLATE_ID_CAREER=${{ secrets.VITE_EMAILJS_TEMPLATE_ID_CAREER }}" >> .env
          echo "VITE_CLOUDINARY_API_KEY=${{ secrets.VITE_CLOUDINARY_API_KEY }}" >> .env
          echo "VITE_CLOUDINARY_API_SECRET=${{ secrets.VITE_CLOUDINARY_API_SECRET }}" >> .env
          echo "VITE_CLOUDINARY_CLOUD_NAME=${{ secrets.VITE_CLOUDINARY_CLOUD_NAME }}" >> .env

      # Step 4: Build the project
      - name: Build the project
        run: npm run build

      # Step 5: Upload production-ready build files as artifacts
      - name: Upload production-ready build files
        uses: actions/upload-artifact@v4
        with:
          name: production-files
          path: ./dist

  # Deployment job
  # Deployment job
  deploy:
    name: Deploy to IIS Server
    needs: build
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'

    steps:
      # Step 1: Download the artifact
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: production-files
          path: ./dist

      # Step 2: Deploy to IIS Server
      - name: Start Deployment to IIS Server
        shell: pwsh
        run: |
          Write-Output "Starting deployment to IIS Server..."

          # Path to PowerShell executable
          $psPath = "C:\Program Files\PowerShell\7\pwsh.exe"


          # Ensure PowerShell exists
          if (-not (Test-Path -Path $psPath)) {
              Write-Output "ERROR: PowerShell not found at $psPath. Deployment aborted."
              Exit 1
          } else {
              Write-Output "PowerShell found at: $psPath"
          }

          # Define the deployment script
         
          Write-Output 'PowerShell is accessed successfully!'

          $path = "C:\Project\MssplWebsite\assets\aboutus-DvEMdZnm.webp"

          # Check if the file exists and is accessible
          if (Test-Path $path) {
              Write-Output "File exists: $path"

          } else {
              Write-Output "ERROR: File does not exist or access is denied: $path"
          }

          # Ensure the WebAdministration module is loaded
          if (-not (Get-Module -Name WebAdministration)) {
              Write-Output 'Loading WebAdministration module...'
              Import-Module WebAdministration 
          }

          # Define paths
          $sourcePath = "$env:GITHUB_WORKSPACE\dist"
          $iisPath = "C:\Project\MssplWebsite"

          # Debug: Output paths being used
          Write-Output "Source Path: $sourcePath"
          Write-Output "Destination Path: $iisPath"

          # Check if source path exists
          if (-Not (Test-Path -Path $sourcePath)) {
              Write-Output "ERROR: Source path does not exist. Deployment aborted."
              Exit 1
          }

          # Check if IIS path exists
          if (-Not (Test-Path -Path $iisPath)) {
              Write-Output "ERROR: IIS path does not exist. Deployment aborted."
              Exit 1
          }

          # Debug: Display contents of source path
          Write-Output "Contents of Source Path:"
          Get-ChildItem -Recurse $sourcePath | Write-Output

          # Clear the old files in the IIS folder except 'web.config'
          Write-Output "Clearing old files in IIS path..."
          Get-Item "C:\Project\MssplWebsite\assets\aboutus-DvEMdZnm.webp" | Format-List Attributes,Access

          Get-ChildItem "$iisPath\*" -Recurse | Where-Object { $_.Attributes -match "ReadOnly" } | ForEach-Object {
              $_.Attributes = "Normal"
          }
          Write-Output "Now Attributes are normal"
          Remove-Item -Path "$iisPath\*" -Recurse 
          #| Where-Object { $_.Name -ne "web.config" } 

          # Copy new files to the IIS folder
          Write-Output "Copying files from $sourcePath to $iisPath..."
          Copy-Item -Path "$sourcePath\*" -Destination "$iisPath" -Recurse

          # Verify files copied successfully
          Write-Output "Contents of Destination Path:"
          $destinationFiles = Get-ChildItem -Recurse "$iisPath"
          if ($destinationFiles.Count -gt 1) {
              Write-Output "ERROR: No files copied to destination path. Deployment aborted."
              Exit 1
          } else {
              $destinationFiles | Write-Output
          }

          # Restart IIS application pool
          Write-Output "Restarting IIS application pool..."
          Restart-WebAppPool -Name "website"

         

          # for accessing the path of poweshell
          # $psPath = (Get-Command powershell -ErrorAction SilentlyContinue).Source
          #          if (-not $psPath) {
          #             Write-Output "ERROR: PowerShell is not available on this system."
          #            Exit 1
          #          } else { $psPath}


